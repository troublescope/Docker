name: Build & Push (tg-bot-api)

on:
  push:
    branches: [ "master" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:
    inputs:
      arch:
        description: "Target architecture"
        type: choice
        required: true
        default: multi
        options: [ multi, amd64, arm64 ]
      push:
        description: "Push image to GHCR?"
        type: boolean
        required: true
        default: true
      extra_tag:
        description: "Optional extra tag (e.g. nightly)"
        type: string
        required: false
        default: ""
      jobs:
        description: "CMake build parallelism (ARG JOBS)"
        type: number
        required: false
        default: 4

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tg-bot-api

permissions:
  contents: read
  packages: write

jobs:
  build_amd64:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.arch == 'multi' || inputs.arch == 'amd64' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Normalize image name (lowercase)
        id: names
        shell: bash
        run: |
          set -euo pipefail
          : "${GITHUB_OUTPUT:?}"
          OWNER="$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')"
          echo "image=${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
      - name: Set build variables
        id: buildvars
        shell: bash
        run: |
          echo "git_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags/labels/annotations) -amd64
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          flavor: |
            suffix=-amd64,onlatest=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            type=ref,event=tag
            type=sha
            ${{ github.event_name == 'workflow_dispatch' && inputs.extra_tag != '' && format('type=raw,value={0}-amd64', inputs.extra_tag) || '' }}
          labels: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.url=https://github.com/tdlib/telegram-bot-api
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
          annotations: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
      - name: Build & push (linux/amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha,scope=tg-bot-api-amd64
          cache-to: type=gha,mode=max,scope=tg-bot-api-amd64
          pull: true
          build-args: |
            JOBS=${{ github.event_name == 'workflow_dispatch' && inputs.jobs || 4 }}
            GIT_COMMIT=${{ steps.buildvars.outputs.git_sha }}
            BUILD_DATE=${{ steps.buildvars.outputs.build_date }}

  build_arm64:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.arch == 'multi' || inputs.arch == 'arm64' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Normalize image name (lowercase)
        id: names
        shell: bash
        run: |
          set -euo pipefail
          : "${GITHUB_OUTPUT:?}"
          OWNER="$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')"
          echo "image=${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
      - name: Set build variables
        id: buildvars
        shell: bash
        run: |
          echo "git_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags/labels/annotations) -arm64
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          flavor: |
            suffix=-arm64,onlatest=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            type=ref,event=tag
            type=sha
            ${{ github.event_name == 'workflow_dispatch' && inputs.extra_tag != '' && format('type=raw,value={0}-arm64', inputs.extra_tag) || '' }}
          labels: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.url=https://github.com/tdlib/telegram-bot-api
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
          annotations: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
      - name: Build & push (linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha,scope=tg-bot-api-arm64
          cache-to: type=gha,mode=max,scope=tg-bot-api-arm64
          pull: true
          build-args: |
            JOBS=${{ github.event_name == 'workflow_dispatch' && inputs.jobs || 4 }}
            GIT_COMMIT=${{ steps.buildvars.outputs.git_sha }}
            BUILD_DATE=${{ steps.buildvars.outputs.build_date }}

  manifest:
    needs: [build_amd64, build_arm64]
    if: ${{ (needs.build_amd64.result == 'success' || needs.build_arm64.result == 'success') && github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Normalize image name (lowercase)
        id: names
        shell: bash
        run: |
          set -euo pipefail
          : "${GITHUB_OUTPUT:?}"
          OWNER="$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')"
          echo "image=${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
      - name: Set manifest variables
        id: buildvars
        shell: bash
        run: |
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"
      - name: Compute base tags and annotations
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            type=ref,event=tag
            type=sha
            ${{ github.event_name == 'workflow_dispatch' && inputs.extra_tag != '' && format('type=raw,value={0}', inputs.extra_tag) || '' }}
          annotations: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create multi-arch manifests
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          ANN: ${{ steps.meta.outputs.annotations }}
        shell: bash
        run: |
          set -euo pipefail
          build_ann_args() {
            ann=()
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              ann+=(--annotation "$line")
            done
            printf '%s\0' "${ann[@]}"
          }
          while IFS= read -r REF; do
            [ -z "$REF" ] && continue
            AMD="${REF}-amd64"
            ARM="${REF}-arm64"
            srcs=()
            if docker buildx imagetools inspect "$AMD" >/dev/null 2>&1; then srcs+=("$AMD"); fi
            if docker buildx imagetools inspect "$ARM" >/dev/null 2>&1; then srcs+=("$ARM"); fi
            [ "${#srcs[@]}" -eq 0 ] && continue
            mapfile -d '' ann_args < <(build_ann_args <<< "$ANN")
            docker buildx imagetools create -t "$REF" "${ann_args[@]}" "${srcs[@]}"
          done <<< "$TAGS"
