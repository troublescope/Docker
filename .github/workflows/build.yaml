name: Build & Push (tg-bot-api)

on:
  push:
    branches: [ "master" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:
    inputs:
      arch:
        description: "Target architecture"
        type: choice
        required: true
        default: multi
        options: [ multi, amd64, arm64 ]
      push:
        description: "Push image to GHCR?"
        type: boolean
        required: true
        default: true
      extra_tag:
        description: "Optional extra tag (e.g. nightly)"
        type: string
        required: false
        default: ""
      jobs:
        description: "CMake build parallelism (ARG JOBS)"
        type: number
        required: false
        default: 4

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tg-bot-api

permissions:
  contents: read
  packages: write

jobs:
  meta:
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.names.outputs.image }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      annotations: ${{ steps.meta.outputs.annotations }}
    steps:
      - name: Normalize image name (lowercase)
        id: names
        shell: bash
        run: |
          set -euo pipefail
          : "${GITHUB_OUTPUT:?GITHUB_OUTPUT not set}"
          OWNER="$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')"
          echo "image=${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"

      - name: Compute base tags/labels/annotations (no suffix)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            type=ref,event=tag
            type=sha
            ${{ github.event_name == 'workflow_dispatch' && inputs.extra_tag != '' && format('type=raw,value={0}', inputs.extra_tag) || '' }}
          labels: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.url=https://github.com/tdlib/telegram-bot-api
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
          annotations: |
            org.opencontainers.image.title=Telegram Bot API Server
            org.opencontainers.image.description=Minimal Alpine-based container for tdlib/telegram-bot-api server.
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

  build:
    needs: meta
    if: >
      ${{
        github.event_name != 'workflow_dispatch' ||
        inputs.arch == 'multi' || inputs.arch == 'amd64' || inputs.arch == 'arm64'
      }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            suffix: "-amd64"
            runs_on: ubuntu-24.04
          - arch: arm64
            platform: linux/arm64
            suffix: "-arm64"
            runs_on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs_on }}

    steps:
      - uses: actions/checkout@v4

      - name: Skip arch per input
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.arch != 'multi' && inputs.arch != matrix.arch }}
        run: echo "Skipping ${{ matrix.arch }} as per input"; exit 0

      - name: Set build variables
        id: buildvars
        shell: bash
        run: |
          echo "git_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Render per-arch tags
        id: tags
        shell: bash
        env:
          BASE_TAGS: ${{ needs.meta.outputs.tags }}
          SUFFIX: ${{ matrix.suffix }}
        run: |
          set -euo pipefail
          T="$(printf '%s\n' "${BASE_TAGS}" | awk -v s="${SUFFIX}" 'NF{print $0 s}')"
          echo "value<<EOF" >> "$GITHUB_OUTPUT"
          echo "${T}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Build & push (${{ matrix.platform }})
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push) }}
          tags: ${{ steps.tags.outputs.value }}
          labels: |
            ${{ needs.meta.outputs.labels }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
          annotations: |
            ${{ needs.meta.outputs.annotations }}
            org.opencontainers.image.revision=${{ steps.buildvars.outputs.git_sha }}
            org.opencontainers.image.created=${{ steps.buildvars.outputs.build_date }}
          cache-from: type=gha,scope=tg-bot-api-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=tg-bot-api-${{ matrix.arch }}
          pull: true
          build-args: |
            JOBS=${{ github.event_name == 'workflow_dispatch' && inputs.jobs || 4 }}
            GIT_COMMIT=${{ steps.buildvars.outputs.git_sha }}
            BUILD_DATE=${{ steps.buildvars.outputs.build_date }}

  manifest:
    needs: [meta, build]
    if: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push) }}
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create & push manifest list (with OCI annotations)
        env:
          IMAGE: ${{ needs.meta.outputs.image }}
          TAGS: ${{ needs.meta.outputs.tags }}
          ANN: ${{ needs.meta.outputs.annotations }}
        shell: bash
        run: |
          set -euo pipefail
          ann_args() {
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              echo -n " --annotation $line"
            done
          }
          make_refs() {
            local tag="$1"
            local out=""
            if docker buildx imagetools inspect "${IMAGE}:${tag}-amd64" >/dev/null 2>&1; then
              out="${out} ${IMAGE}:${tag}-amd64"
            fi
            if docker buildx imagetools inspect "${IMAGE}:${tag}-arm64" >/dev/null 2>&1; then
              out="${out} ${IMAGE}:${tag}-arm64"
            fi
            echo "${out}"
          }
          while IFS= read -r tag; do
            [[ -z "$tag" ]] && continue
            SRCS="$(make_refs "$tag")"
            if [[ -z "$SRCS" ]]; then
              echo "Skip $tag (no arch images)"; continue
            fi
            echo ">> manifest: ${IMAGE}:${tag}  <= ${SRCS}"
            docker buildx imagetools create -t "${IMAGE}:${tag}" $(ann_args <<< "${ANN}") ${SRCS}
          done <<< "${TAGS}"
